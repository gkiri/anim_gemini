import sys
import os

# This script is typically in: APP_BASE_DIR/outputs/generated_content/manim_scripts/
# layout_utils.py is in: APP_BASE_DIR/layout_utils.py
# Add APP_BASE_DIR to sys.path to allow direct import of layout_utils.
script_absolute_path = os.path.abspath(__file__)
script_dir = os.path.dirname(script_absolute_path)
# Navigate three levels up from script_dir (manim_scripts -> generated_content -> outputs -> APP_BASE_DIR)
app_base_dir = os.path.abspath(os.path.join(script_dir, "..", "..", ".."))

if app_base_dir not in sys.path:
    sys.path.insert(0, app_base_dir)

from manim import *
from layout_utils import *  # Core utilities for layout
import numpy as np  # If needed for complex calculations
import logging  # Mandatory import
logger = logging.getLogger(__name__)  # Mandatory logger setup

# --- Helper Function: stack_mobjects_vertically ---
def stack_mobjects_vertically(mobjects_list, center_point=ORIGIN, buff=0.5):
    # Ensure VGroup and ORIGIN are available from manim import
    group = VGroup(*mobjects_list).arrange(DOWN, buff=buff)
    if not np.array_equal(center_point, ORIGIN):  # Only move if center_point is not default ORIGIN
        group.move_to(center_point)
    return group

# --- Helper Function: get_zone_center ---
def get_zone_center(zone_name: str):
    # Ensure logger is defined, ORIGIN from manim, np for numpy array
    logger.warning(f"get_zone_center called for '{zone_name}' using default ORIGIN. Define actual zone coordinates if specific positioning is critical.")
    # Example for specific zones (adapt as needed by uncommenting and defining coordinates):
    # main_content_area_center = np.array([0, 1, 0])  # Example: 1 unit up from center
    # if zone_name == "MAIN_CONTENT_AREA":
    #     return main_content_area_center
    return ORIGIN  # Default to screen center

# --- END OF MANDATORY HELPER DEFINITIONS ---

class Scene1Scene_1_Topic__NonCooperation_Movement(Scene):
    def construct(self):
        # Create and animate the title text in the TITLE_AREA
        title_text = create_smart_text(
            "Scene 1: Topic - Non-Cooperation Movement",
            zone_name="TITLE_AREA",
            font_size=48,
            max_font_size=60
        )
        self.play(Write(title_text))
        self.wait(1)  # Pause briefly for the title to settle

        # Create narration text in the NARRATION_AREA
        narration_text = create_smart_text(
            "This is the narration for scene 1 concerning Non-Cooperation Movement. More details would be generated by an AI.",
            zone_name="NARRATION_AREA",
            font_size=28
        )
        self.play(FadeIn(narration_text, run_time=2))  # Smooth fade-in for narration
        self.wait(1)

        # Main content: Represent key concepts visually in MAIN_CONTENT_AREA
        # For Non-Cooperation Movement, use shapes and text to symbolize boycott and civil disobedience
        key_concept1 = create_smart_text(
            "Boycott of British Goods",
            zone_name="MAIN_CONTENT_AREA",
            target_zone_width=get_zone_width("MAIN_CONTENT_AREA") * 0.6,
            font_size=32
        )
        
        key_concept2 = create_smart_text(
            "Civil Disobedience",
            zone_name="MAIN_CONTENT_AREA",
            target_zone_width=get_zone_width("MAIN_CONTENT_AREA") * 0.6,
            font_size=32
        )
        
        # Create symbolic shapes: A broken chain for disobedience and a crossed-out item for boycott
        broken_chain = Line(start=np.array([-1, 0, 0]), end=np.array([1, 0, 0]), color=RED).set_stroke(width=4)  # Line for chain
        broken_chain.add(Line(start=np.array([-0.5, 0.5, 0]), end=np.array([0.5, -0.5, 0]), color=RED))  # Break in chain
        broken_chain.next_to(key_concept2, DOWN, buff=0.3)
        
        crossed_out_item = Rectangle(width=1, height=0.5, color=BLUE, fill_opacity=0.5)  # Rectangle for an item
        crossed_out_item.add(Line(start=np.array([-0.5, -0.25, 0]), end=np.array([0.5, 0.25, 0]), color=RED, stroke_width=3))  # Cross line
        crossed_out_item.next_to(key_concept1, DOWN, buff=0.3)
        
        # Stack the main content elements vertically and position in MAIN_CONTENT_AREA
        main_content_items = [key_concept1, crossed_out_item, key_concept2, broken_chain]
        main_content_group = stack_mobjects_vertically(
            main_content_items,
            center_point=get_zone_center("MAIN_CONTENT_AREA")
        )
        
        self.play(Create(main_content_group), run_time=2)  # Animate the creation of the group
        self.play(Indicate(main_content_group), LaggedStart(*[Indicate(item) for item in main_content_items], run_time=3))  # Highlight each item for emphasis
        
        self.wait(2)  # Hold the scene for viewer absorption
        self.play(FadeOut(title_text, narration_text, main_content_group), run_time=1)  # Fade out everything at the end