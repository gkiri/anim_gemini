import numpy as np
import logging

# Logger for helper functions - assumes main script (or Manim) sets up basicConfig
logger = logging.getLogger(__name__)

# --- Helper Function: stack_mobjects_vertically ---
# Stacks a list of Mobjects vertically.
# `center_point=None` means the group's final position is determined purely by arrange,
# otherwise, it's moved to the specified center_point after arrangement.
def stack_mobjects_vertically(mobjects_list, center_point=None, buff=0.5):
    # Ensure VGroup, DOWN, ORIGIN are available from 'from manim import *'
    # Ensure np is imported for np.array_equal
    if not mobjects_list: # Handle empty list
        return VGroup()
    group = VGroup(*mobjects_list).arrange(DOWN, buff=buff)
    if center_point is not None: # If a center_point is specified for the group
        group.move_to(center_point) # ORIGIN (0,0,0) is the default for move_to if center_point is True but no array
    return group

# --- Helper Function: get_zone_center ---
# Returns a predefined coordinate for a named zone.
# Placeholder: currently returns ORIGIN and logs a warning.
def get_zone_center(zone_name: str):
    # Ensure logger is defined, ORIGIN is available from 'from manim import *'
    # Ensure np is imported if np.array values are to be returned for specific zones.
    logger.warning(f"get_zone_center called for '{zone_name}'. It currently returns ORIGIN (0,0,0). "
                   f"Define actual zone coordinates in this boilerplate if specific positioning is critical.")
    # Example for specific zones (uncomment and adapt here if needed):
    # if zone_name == "TITLE_ZONE":
    #     return np.array([0, 3, 0]) # e.g., Top center
    # if zone_name == "MAIN_CONTENT_AREA":
    #     return np.array([0, 0, 0]) # e.g., Screen center
    return ORIGIN # Default to screen center (0,0,0)

# --- END OF PREPENDED BOILERPLATE ---
# LLM-generated code (starting with 'from manim import *') should follow.

from manim import *
import sys
import os

# This script is typically in: APP_BASE_DIR/outputs/generated_content/manim_scripts/
# layout_utils.py is in: APP_BASE_DIR/layout_utils.py
# Add APP_BASE_DIR to sys.path to allow direct import of layout_utils.
script_absolute_path = os.path.abspath(__file__)
script_dir = os.path.dirname(script_absolute_path)
# Navigate three levels up from script_dir (manim_scripts -> generated_content -> outputs -> APP_BASE_DIR)
app_base_dir = os.path.abspath(os.path.join(script_dir, "..", "..", ".."))

if app_base_dir not in sys.path:
    sys.path.insert(0, app_base_dir)

from manim import *
from layout_utils import *  # Core utilities for layout
import numpy as np  # If needed for complex calculations

# --- Helper Function: stack_mobjects_vertically ---
# Stacks a list of Mobjects vertically.
# `center_point=None` means the group's final position is determined purely by arrange,
# otherwise, it's moved to the specified center_point after arrangement.
def stack_mobjects_vertically(mobjects_list, center_point=None, buff=0.5):
    if not mobjects_list:  # Handle empty list
        return VGroup()
    group = VGroup(*mobjects_list).arrange(DOWN, buff=buff)
    if center_point is not None:
        group.move_to(center_point)
    return group

# --- Helper Function: get_zone_center ---
# Returns a predefined coordinate for a named zone.
# Placeholder: currently returns ORIGIN and logs a warning.
def get_zone_center(zone_name: str):
    logger.warning(f"get_zone_center called for '{zone_name}'. It currently returns ORIGIN (0,0,0). "
                   f"Define actual zone coordinates in this boilerplate if specific positioning is critical.")
    return ORIGIN  # Default to screen center (0,0,0)

class Scene1Scene_1_Topic__NonCooperation_Movement(Scene):
    def construct(self):
        # Create the scene title using create_smart_text in TITLE_AREA
        title_text = create_smart_text(
            "Scene 1: Topic - Non-Cooperation Movement",
            zone_name="TITLE_AREA",
            font_size=48,
            max_font_size=60
        )
        self.play(Write(title_text))
        
        # Create narration text in NARRATION_AREA
        narration_text = create_smart_text(
            "This is the narration for scene 1 concerning Non-Cooperation Movement. More details would be generated by an AI.",
            zone_name="NARRATION_AREA",
            font_size=28
        )
        self.play(FadeIn(narration_text))
        
        # Main content: Represent key concepts visually in MAIN_CONTENT_AREA
        # Use simple shapes to symbolize the movement: e.g., a group of people (dots) and a boycott symbol (crossed line)
        concept1_text = create_smart_text(
            "Key Concept: Boycott of British Goods",
            zone_name="MAIN_CONTENT_AREA",
            target_zone_width=get_zone_width("MAIN_CONTENT_AREA") * 0.6,
            font_size=32
        )
        
        concept2_text = create_smart_text(
            "Actions: Protests and Strikes",
            zone_name="MAIN_CONTENT_AREA",
            target_zone_width=get_zone_width("MAIN_CONTENT_AREA") * 0.6,
            font_size=32
        )
        
        # Create a simple shape for protest: a circle representing a crowd
        crowd_symbol = Circle(radius=0.5, color=BLUE, fill_opacity=0.7)
        
        # Create a boycott symbol: a line crossed out
        boycott_symbol = Line(  # Ensure start and end are 3D points
            start=np.array([-1, 0, 0]),  # Start point
            end=np.array([1, 0, 0]),  # End point
            stroke_color=RED,
            stroke_width=4
        )
        cross_line = Line(  # Cross the boycott line
            start=np.array([-0.5, -0.5, 0]),  # Start point
            end=np.array([0.5, 0.5, 0]),  # End point
            stroke_color=RED,
            stroke_width=4
        )
        boycott_group = VGroup(boycott_symbol, cross_line).arrange(RIGHT, buff=0.2)
        
        # Stack the main content items vertically
        items_to_stack = [concept1_text, concept2_text, crowd_symbol, boycott_group]
        main_content_group = stack_mobjects_vertically(
            items_to_stack,
            center_point=get_zone_center("MAIN_CONTENT_AREA")
        )
        
        # Animate the main content
        self.play(Create(main_content_group), run_time=2)
        
        # Add some indication animations for engagement
        self.play(Indicate(crowd_symbol, scale_factor=1.2, color=YELLOW))
        self.play(Indicate(boycott_group, scale_factor=1.1))
        
        # Wait to let the scene sink in
        self.wait(5)  # Approximately 15-30 seconds total scene length
        
        # Fade out elements
        self.play(FadeOut(title_text, narration_text, main_content_group))
        self.wait(1)