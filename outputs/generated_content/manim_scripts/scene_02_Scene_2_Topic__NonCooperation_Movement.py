import numpy as np
import logging

# Logger for helper functions - assumes main script (or Manim) sets up basicConfig
logger = logging.getLogger(__name__)

# --- Helper Function: stack_mobjects_vertically ---
# Stacks a list of Mobjects vertically.
# `center_point=None` means the group's final position is determined purely by arrange,
# otherwise, it's moved to the specified center_point after arrangement.
def stack_mobjects_vertically(mobjects_list, center_point=None, buff=0.5):
    # Ensure VGroup, DOWN, ORIGIN are available from 'from manim import *'
    # Ensure np is imported for np.array_equal
    if not mobjects_list: # Handle empty list
        return VGroup()
    group = VGroup(*mobjects_list).arrange(DOWN, buff=buff)
    if center_point is not None: # If a center_point is specified for the group
        group.move_to(center_point) # ORIGIN (0,0,0) is the default for move_to if center_point is True but no array
    return group

# --- Helper Function: get_zone_center ---
# Returns a predefined coordinate for a named zone.
# Placeholder: currently returns ORIGIN and logs a warning.
def get_zone_center(zone_name: str):
    # Ensure logger is defined, ORIGIN is available from 'from manim import *'
    # Ensure np is imported if np.array values are to be returned for specific zones.
    logger.warning(f"get_zone_center called for '{zone_name}'. It currently returns ORIGIN (0,0,0). "
                   f"Define actual zone coordinates in this boilerplate if specific positioning is critical.")
    # Example for specific zones (uncomment and adapt here if needed):
    # if zone_name == "TITLE_ZONE":
    #     return np.array([0, 3, 0]) # e.g., Top center
    # if zone_name == "MAIN_CONTENT_AREA":
    #     return np.array([0, 0, 0]) # e.g., Screen center
    return ORIGIN # Default to screen center (0,0,0)

# --- END OF PREPENDED BOILERPLATE ---
# LLM-generated code (starting with 'from manim import *') should follow.

from manim import *
import sys
import os

# This script is typically in: APP_BASE_DIR/outputs/generated_content/manim_scripts/
# layout_utils.py is in: APP_BASE_DIR/layout_utils.py
# Add APP_BASE_DIR to sys.path to allow direct import of layout_utils.
script_absolute_path = os.path.abspath(__file__)
script_dir = os.path.dirname(script_absolute_path)
# Navigate three levels up from script_dir (manim_scripts -> generated_content -> outputs -> APP_BASE_DIR)
app_base_dir = os.path.abspath(os.path.join(script_dir, "..", "..", ".."))

if app_base_dir not in sys.path:
    sys.path.insert(0, app_base_dir)

from manim import *
from layout_utils import *  # Core utilities for layout
import numpy as np  # If needed
import logging  # Mandatory import
logger = logging.getLogger(__name__)

# --- Helper Function: stack_mobjects_vertically ---
# Stacks a list of Mobjects vertically.
# `center_point=None` means the group's final position is determined purely by arrange,
# otherwise, it's moved to the specified center_point after arrangement.
def stack_mobjects_vertically(mobjects_list, center_point=None, buff=0.5):
    if not mobjects_list:  # Handle empty list
        return VGroup()
    group = VGroup(*mobjects_list).arrange(DOWN, buff=buff)
    if center_point is not None:
        group.move_to(center_point)
    return group

# --- Helper Function: get_zone_center ---
# Returns a predefined coordinate for a named zone.
# Placeholder: currently returns ORIGIN and logs a warning.
def get_zone_center(zone_name: str):
    logger.warning(f"get_zone_center called for '{zone_name}'. It currently returns ORIGIN (0,0,0). "
                   f"Define actual zone coordinates in this boilerplate if specific positioning is critical.")
    return ORIGIN  # Default to screen center (0,0,0)

class Scene2Scene_2_Topic__NonCooperation_Movement(Scene):
    def construct(self):
        # Create and animate the title in the TITLE_AREA
        title_text = create_smart_text(
            "Scene 2: Topic - Non-Cooperation Movement",
            zone_name="TITLE_AREA",
            font_size=48,
            max_font_size=60
        )
        self.play(Write(title_text))
        self.wait(1)  # Pause for emphasis

        # Create and animate the narration text in the NARRATION_AREA
        narration_text = create_smart_text(
            "This is the narration for scene 2 concerning Non-Cooperation Movement. More details would be generated by an AI.",
            zone_name="NARRATION_AREA",
            font_size=28
        )
        self.play(FadeIn(narration_text, shift=DOWN))
        self.wait(1)

        # Create main content in MAIN_CONTENT_AREA
        # Key points about Non-Cooperation Movement, visually represented with text and simple shapes
        point1 = create_smart_text(
            "Led by Mahatma Gandhi",
            zone_name="MAIN_CONTENT_AREA",
            target_zone_width=get_zone_width("MAIN_CONTENT_AREA") * 0.8,
            font_size=32
        )
        
        # Simple shape to represent Gandhi (e.g., a circle as a placeholder icon)
        gandhi_icon = Circle(radius=0.5, color=WHITE, fill_opacity=1).next_to(point1, DOWN, buff=0.3)
        
        point2 = create_smart_text(
            "Boycott of British goods and institutions",
            zone_name="MAIN_CONTENT_AREA",
            target_zone_width=get_zone_width("MAIN_CONTENT_AREA") * 0.8,
            font_size=32
        )
        
        # Simple shape to represent boycott (e.g., a crossed-out rectangle for goods)
        boycott_shape = Rectangle(width=1, height=0.5, color=RED, stroke_width=2).next_to(point2, DOWN, buff=0.3)
        
        point3 = create_smart_text(
            "Mass civil disobedience and non-violence",
            zone_name="MAIN_CONTENT_AREA",
            target_zone_width=get_zone_width("MAIN_CONTENT_AREA") * 0.8,
            font_size=32
        )
        
        # Simple arrow to represent movement or direction
        movement_arrow = Arrow(
            start=np.array([-1, 0, 0]),  # 3D point
            end=np.array([1, 0, 0]),    # 3D point
            color=BLUE,
            stroke_width=4
        ).next_to(point3, DOWN, buff=0.3)
        
        # Stack the main content items vertically and position in MAIN_CONTENT_AREA
        items_to_stack = [point1, gandhi_icon, point2, boycott_shape, point3, movement_arrow]
        main_content_group = stack_mobjects_vertically(
            items_to_stack,
            center_point=get_zone_center("MAIN_CONTENT_AREA")
        )
        
        # Animate the main content group
        self.play(LaggedStart(
            *[FadeIn(item, shift=RIGHT) for item in main_content_group],
            lag_ratio=0.5
        ))
        self.wait(2)  # Allow time to view the content
        
        # Add some dynamic animation for engagement, e.g., highlight key points
        self.play(
            Indicate(gandhi_icon, scale_factor=1.2, color=YELLOW),
            Indicate(boycott_shape, scale_factor=1.2, color=RED),
            run_time=1
        )
        self.wait(1)
        
        # Fade out elements to end the scene
        self.play(
            FadeOut(title_text),
            FadeOut(narration_text),
            FadeOut(main_content_group)
        )
        self.wait(1)  # Final pause