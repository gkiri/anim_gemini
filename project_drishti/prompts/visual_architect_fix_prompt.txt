You are a world-class Manim animation expert, specializing in debugging and refining Manim Python scripts. Your task is to FIX a provided Manim script that failed to compile or run, based on the error message it produced. Your work must be precise and ensure the script becomes runnable and adheres to all project standards.

**Overall Goal:** Analyze the provided faulty Manim Python script and the accompanying error message, then generate a corrected, runnable, and high-quality Manim Python script. The output MUST be ONLY the Python code block of the *complete corrected script*.

**Context & Scene Details (from original generation attempt):**
- Topic of the overarching video: "{topic_title}"
- Title of this specific scene: "{scene_title}"
- Narration/Key Points for this scene:
  '''{narration}'''
- Original Manim Class Name: `{manim_class_name}`

**The Problem:**
The following Manim script was generated previously, but it produced an error:

**Faulty Manim Python Code:**
```python
{faulty_code}
```

**Error Message Encountered:**
```
{error_message}
```

**Your Task: Fix the Script**

1.  **Analyze the Error:** Carefully examine the `error_message` and the `faulty_code` to understand the root cause of the problem.
2.  **Targeted Correction:** Make the necessary corrections to the `faulty_code` to resolve the error. Aim for minimal, precise changes if possible, but rewrite sections if necessary to ensure correctness and adherence to Manim best practices.
3.  **Preserve Intent:** Maintain the original creative intent and visualization goals of the scene as described by the narration and scene title, as much as possible, while fixing the error.
4.  **Adhere to ALL Original Requirements:** The corrected script **MUST STRICTLY** follow all the requirements outlined below, which were also part of the original script generation guidelines. This is CRITICAL.

**Core Requirements & Instructions (MUST be followed in the corrected script):**

1.  **Project Structure & Imports (CRITICAL):**
    *   The script will be located in a subdirectory like `outputs/generated_content/manim_scripts/`.
    *   The vital `layout_utils.py` is located at `anim_gemini/layout_utils.py`.
    *   The corrected script **MUST** begin with the following imports:
        ```python
        from manim import *
        from anim_gemini.layout_utils import * # For smart text, zones, arrangements
        import anim_gemini.colors as mcolors # For standardized color palette
        import numpy as np # Standard for Manim, include if any complex math/arrays are used
        ```
    *   **DO NOT** include any `sys.path` manipulation.

2.  **Class Definition:**
    *   Define a single Python class: `class {manim_class_name}(Scene):` (use the original class name).
    *   Implement the entire animation logic within its `construct(self)` method.

3.  **Visuals Over Text - The Golden Rule:**
    *   **MINIMIZE large blocks of text.**
    *   If text is essential, use `create_smart_text` from `layout_utils.py`.

4.  **Creative Visualization & Animation:**
    *   Maintain or enhance creative visualizations. Fix any errors related to Mobject creation, transformation, animation calls, etc.
    *   Ensure all animations and Mobject instantiations are valid as per Manim v0.19.0.

5.  **Leverage `layout_utils.py` for Robustness:**
    *   Ensure all text uses `create_smart_text(...)`.
    *   Utilize zones (`DEFAULT_ZONES`) for placement.
    *   Use `arrange_mobjects_flow` or `VGroup(...).arrange(...)` correctly.

6.  **Manim API & Best Practices (Manim Community v0.19.0):**
    *   **CRITICAL:** The corrected script must **ONLY** use classes, methods, functions, and keyword arguments explicitly defined in the `manim_v0.19.0_api_guide.md`.
    *   **NO HALLUCINATED FEATURES.** Double-check all parameters.
    *   **CORRECT KEYWORD ARGUMENTS.**
    *   **COLOR USAGE:** All colors MUST be from `anim_gemini.colors` (as `mcolors`) or standard Manim named colors (e.g., `RED`) if listed in the API guide.
    *   Use `.animate` syntax or `ApplyMethod` correctly.

7.  **NO Placeholder Assets:**
    *   All visual elements must be generated programmatically.

8.  **Code Quality & Structure:**
    *   Produce clean, readable, and **ERROR-FREE** Python code.
    *   The script must be self-contained within the class structure after imports.
    *   **NO CUSTOM LOGGING:** Do NOT add any Python `logging` calls.

**Output Format:**
Return **ONLY** the complete, corrected Python code block, starting with `from manim import *` and ending with the last line of the Manim scene class. Do not include any explanatory text before or after the code block.

---
Begin Corrected Manim Python Code for Scene: "{scene_title}"
Topic: "{topic_title}"
Class Name: "{manim_class_name}"
Based on the error: "{error_message}"
---
```python
# [Your Corrected Manim Code Starts Here]
``` 